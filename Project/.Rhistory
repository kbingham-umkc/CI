mlbdata = read.csv("mlbdata2.csv", header=TRUE, sep=",")
newMLBData
mlbdata = read.csv("mlbdata3.csv", header=TRUE, sep=",", nrows=5000)
mlbdata = read.csv("mlbdata3.csv", header=TRUE, sep=",", nrows=5000)
mlbdata = read.csv("mlbdata3.csv", header=TRUE, sep=",", nrows=5000)
setwd("~/GitHub/CI/Project")
mlbdata = read.csv("mlbdata3.csv", header=TRUE, sep=",", nrows=5000)
fix(mlbdata)
library(leaps)
newMLBData = na.omit(mlbdata)
attach(newMLBData)
set.seed(1)
College.cv.out = cv.glmnet(newMLBData, newMLBData$YearP1W, alpha=0)
library(islr)
library(ISLR)
College.cv.out = cv.glmnet(newMLBData, newMLBData$YearP1W, alpha=0)
College.cv.out = glmnet(newMLBData, newMLBData$YearP1W, alpha=0)
library(glmnet)
College.cv.out = glmnet(newMLBData, newMLBData$YearP1W, alpha=0)
College.cv.out
fix(newMLBData)
glmnet(newMLBData$YearP1W, newMLBData, alpha=0)
glmnet(newMLBData, newMLBData$YearP1W, alpha=0)
College.cv.out = glmnet(newMLBData, newMLBData$YearP1W, alpha=0)
mlbmatrix = model.matrix(newMLBData$YearP1W, newMLBData)
mlbmatrix = model.matrix(newMLBData$YearP1W~, newMLBData)
mlbmatrix = model.matrix(newMLBData$YearP1W~., newMLBData)
College.cv.out = glmnet(mlbmatrix, newMLBData$YearP1W, alpha=0)
College.cv.out
summary(College.cv.out)
College.cv.out$lambda[50]
College.cv.out$lambda[60]
coef(College.cv.out)[,50]
mlbdata = read.csv("mlbdata2.csv", header=TRUE, sep=",", nrows=5000)
newMLBData = na.omit(mlbdata)
attach(newMLBData)
set.seed(1)
mlbmatrix = model.matrix(newMLBData$YearP1W~., newMLBData)
College.cv.out = glmnet(mlbmatrix, newMLBData$YearP1W, alpha=0)
college.cv.out
College.cv.out
train = sample(c(TRUE, FALSE), dim(mlbmatrix[1]), rep=TRUE)
test = !train
dim(newMLBData)
dim(newMLBData)[1]
train = sample(c(TRUE, FALSE), dim(newMLBData)[1], rep=TRUE)
test = !train
MLB.trainX = model.matrix(YearP1W~., newMLBData[train,])[,]
MLB.trainY = newMLBData[train,]$YearP1W
MLB.trainY
MLB.testX = model.matrix(YearP1W~., newMLBData[train,])[,]
MLB.testY = newMLBData[train,]$YearP1W
dim(MLB.testX)
length(MLB.testY)
set.seed(1)
train = sample(c(TRUE, FALSE), dim(newMLBData)[1], rep=TRUE)
test = !train
MLB.trainX = model.matrix(YearP1W~., newMLBData[train,])[,]
MLB.trainY = newMLBData[train,]$YearP1W
MLB.testX = model.matrix(YearP1W~., newMLBData[train,])[,]
MLB.testY = newMLBData[train,]$YearP1W
MLB.lm = lm(YearP1W~., data=newMLBData, subset=train)
coef(MLB.lm)
MLB.lmPredictY = predict(MLB.lm, newMLBData[test,])
MLB.lmPredictY = predict(MLB.lm, mlbmatrix[test,])
MLB.lmPredictY = predict(MLB.lm, newMLBData[test,])
MLB.ridge = glmnet(MLB.trainX, MLB.trainY, alpha=0)
MLB.ridge$lambda.min
MLB.ridge$lambda
MLB.ridge$lambda.min
MLB.ridge = cv.glmnet(MLB.trainX, MLB.trainY, alpha=0)
MLB.ridge$lambda.min
MLB.ridge$lambda
MLB.mod = glmnet(MLB.trainX, BML.trainY, alpha=0)
MLB.mod = glmnet(MLB.trainX, MLB.trainY, alpha=0)
MLB.ridge = cv.glmnet(MLB.trainX, MLB.trainY, alpha=0)
MLB.ridge.pred = predict(MLB.mod, s=MLB.ridge$lambda.min, MLB.testX)
MLB.ridge.pred = predict(MLB.mod, s=MLB.ridge$lambda.min, MLB.testX)
MLB.ridge.mean = mean(( MLB.ridge.pred - MLB.testY)^2)
MLB.ridge.mean
MLB.lassomod = glmnet(MLB.trainX, MLB>trainY, alpha=1)
MLB.lassomod = glmnet(MLB.trainX, MLB.trainY, alpha=1)
MLB.lasso.cv = cv.glmnet(MLB.trainX, MLB.trainY, alpha=1)
MLB.lasso.cv$lambda.min
MLB.lasso.cv$lambda
MLB.lasso.cv$lambda.min
MLB.lasso.pred = predict(MLB.lassomod, s=MLB.lasso.cv$lambda.min, newx=MLB.testX)
MLB.lasso.mean = mean(( MLB.lasso.pred - MLB.testY)^2)
MLB.lasso.mean
MLB.ridge.mean
summary(MLB.lasso.cv)
library(PLS)
MLB.pcr.fit = pcr(YearP1W~., data=newMLBData, subset=train, scale=TRUE, validation="CV")
library(PLS)
MLB.pcr.fit = pcr(YearP1W~., data=newMLBData, subset=train, scale=TRUE, validation="CV")
library(pls)
MLB.pcr.fit = pcr(YearP1W~., data=newMLBData, subset=train, scale=TRUE, validation="CV")
newMLBData$x
newMLBData$X
newMLBData
MLB.pcr.fit = pcr(YearP1W~., data=newMLBData, subset=train, scale=TRUE, validation="CV")
mlbdata = read.csv("mlbdata3.csv", header=TRUE, sep=",", nrows=5000)
fix(mlbdata)
library(leaps)
library(glmnet)
newMLBData = na.omit(mlbdata)
attach(newMLBData)
#Get a Validation and a Test set randomly.
set.seed(1)
train = sample(c(TRUE, FALSE), dim(newMLBData)[1], rep=TRUE)
test = !train
MLB.trainX = model.matrix(YearP1W~., newMLBData[train,])[,]
MLB.trainY = newMLBData[train,]$YearP1W
MLB.testX = model.matrix(YearP1W~., newMLBData[train,])[,]
MLB.testY = newMLBData[train,]$YearP1W
mlbmatrix = model.matrix(newMLBData$YearP1W~., newMLBData)
#Let's do a fit with least squares
MLB.lm = lm(YearP1W~., data=newMLBData, subset=train)
MLB.lmPredictY = predict(MLB.lm, newMLBData[test,])
MLB.mod = glmnet(MLB.trainX, MLB.trainY, alpha=0)
MLB.ridge = cv.glmnet(MLB.trainX, MLB.trainY, alpha=0)
MLB.ridge.pred = predict(MLB.mod, s=MLB.ridge$lambda.min, MLB.testX)
MLB.ridge.mean = mean(( MLB.ridge.pred - MLB.testY)^2)
#Lasso
MLB.lassomod = glmnet(MLB.trainX, MLB.trainY, alpha=1)
MLB.lasso.cv = cv.glmnet(MLB.trainX, MLB.trainY, alpha=1)
MLB.lasso.pred = predict(MLB.lassomod, s=MLB.lasso.cv$lambda.min, newx=MLB.testX)
#Why does the lambda have lowers lambdas than the min reported?
MLB.lasso.mean = mean(( MLB.lasso.pred - MLB.testY)^2)
#PLS
library(pls)
MLB.pcr.fit = pcr(YearP1W~., data=newMLBData, subset=train, scale=TRUE, validation="CV")
summary(MLB.pcr.fit)
MLB.pcr.pred = predict(MLB.pcr.fit, MLB.test[,-1],ncomp=17)
MLB.pcr.pred = predict(MLB.pcr.fit, MLB.testX[,-1],ncomp=17)
MLB.pcr.pred = predict(MLB.pcr.fit, MLB.testX[,-1],ncomp=17)
MLB.pcr.mean = mean((MLB.pcr.pred - MLB.testY)^2)
MLB.pcr.mean = mean((MLB.pcr.pred - MLB.testY)^2)
MLB.pcr.mean
MLB.lasso.mean
MLB.ridge.mean
MLB.lasso
MLB.lasso.cv
MLB.lasso.cv$lambda.min
MLB.lasso.pred = predict(MLB.lassomod, s=MLB.lasso.cv$lambda.min, newx=MLB.testX)
#Why does the lambda have lowers lambdas than the min reported?
MLB.lasso.mean = mean(( MLB.lasso.pred - MLB.testY)^2)
MLB.lasso.mean
MLB.pls.fit = plsr(YearP1W~., data=newMLBData, subset=train, scale=TRUE, validation="CV")
MLB.pls.fit
MLB.pls.pred = predict(MLB.pls.fit, MLB.testX[,-1],ncomp=13)
MLB.pcr.pred = predict(MLB.pcr.fit, MLB.testX[,-2],ncomp=17)
MLB.pcr.mean = mean((MLB.pcr.pred - MLB.testY)^2)
MLB.pcr.mean
MLB.pls.predict = predict(MLB.pls.fit, MLB.testX[,-2], ncomp=13)
MLB.pls.mean = mean((MLB.pls.pred - MLB.testY)^2)
MLB.pls.mean
plot(newMLBData$YearP1W, newMLBData)
plot(newMLBData, newMLBData$YearP1W)
help(plot)
plot(newMLBData, newMLBData$YearP1W)
plot(newMLBData, newMLBData$YearP1W)
plot(newMLBData, newMLBData$YearP1W)
plot(newMLBData[c(1:100,)], newMLBData$YearP1W[c(1:100,)])
plot(newMLBData[c(1:100,)], newMLBData[c(1:100,]$YearP1W
plot(newMLBData[c(1:100,)], newMLBData[c(1:100,)]$YearP1W)
newMLBdata[c(1:2),]$YearP1W
newMLBData[c(1:2),]$YearP1W

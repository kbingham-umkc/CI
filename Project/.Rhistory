mlbdata = read.csv("mlbdata2.csv", header=TRUE, sep=",")
setwd("~/GitHub/CI/Project")
mlbdata = read.csv("mlbdata_r.csv", header=TRUE, sep=",", nrows=5000)
#fix(mlbdata)
#Load leaps so we limit the # of dimensions.
library(leaps)
newMLBData = na.omit(mlbdata)
mlbdata=newMLBData
attach(newMLBData)
#Now let's do a training set  Gives us a training set of 2/3rds
set.seed(1)
onetwothree = sample(c(1, 2, 3), nrow(newMLBData), rep=TRUE)
train = onetwothree != 1
test=(!train)
regfit.full = regsubsets(YearP1W~., newMLBData[train,], nvmax=25)
regfit.fwd = regsubsets(YearP1W~., newMLBData[train,], nvmax=30, method="forward")
regfit.bwd = regsubsets(YearP1W~., newMLBData[train,], nvmax=30, method="backward")
regfit.summary = summary(regfit.full)
names(regfit.summary)
regfit.summary$outmat[13,]
coef(regfit.full, id=13)
regfit.summary
plot(regfit.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
plot(regfit.summary$cp, xlab="Number of Variables", ylab="Adjusted cp", type="l")
plot(regfit.summary$bic, xlab="Number of Variables", ylab="Adjusted bic", type="l")
plot(regfit.summary$cp, xlab="Number of Variables", ylab="Adjusted cp", type="l")
plot(regfit.summary$bic, xlab="Number of Variables", ylab="Adjusted bic", type="l")
which.max(regfit.summary$adjr2)
which.min(regfit.summary$cp)
which.min(regfit.summary$bic)
regfit.best = regfit.full
regfit.test = model.matrix(YearP1W~., data=newMLBData[test,])
#Get the MSE Errors
val.errors = rep(NA, 30)
for (i in 1:30){
coefi = coef(regfit.best,id=i)
pred=regfit.test[,names(coefi)]%*%coefi
val.errors[i]=mean((newMLBData$YearP1W[test]-pred)^2)
}
print(which.min(val.errors))
print(coef(regfit.full, 13))
print(coef(regfit.full, 5))
regfit.summary
which.max(regfit.summary$adjr2)
which.min(regfit.summary$cp)
which.min(regfit.summary$bic)
names(regfit.summary)
regfit.summary$outmat[23]
regfit.summary$outmat[23,]
regfit.summary$outmat[13,]
coef(regfit.full, id=23)
coef(regfit.full, id=13)
coef(regfit.full, id=3)
print(which.min(val.errors))
coef(regfit.full, id=10)
plot(regfit.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
which.max(regfit.summary$adjr2)
plot(regfit.summary$cp, xlab="Number of Variables", ylab="Adjusted cp", type="l")
which.min(regfit.summary$cp)
plot(regfit.summary$bic, xlab="Number of Variables", ylab="Adjusted bic", type="l")
which.min(regfit.summary$bic)
regfit.summary
plot(newMLBData[test,]$YearP1W)
plot(newMLBData[test,]$YearP1W)
val.errors
pred = regfit.test[,names(13)]%13
coefi = coef(regfit.best, id=13)
pred = regfit.test[,names(coefi)]%*%coefi
pred
regfit.test
newMLBData[test,]
dim(newMLBData)
newMLBData[test,45]
c(newMLBData[test,45])
vector()
vector(newMLBData[test,45])
coef(regfit.full, id=which.max(regfit.summary$adjr2))
val.errors
mlbdata = read.csv("mlbdata_r.csv", header=TRUE, sep=",", nrows=5000)
#fix(mlbdata)
#Load leaps so we limit the # of dimensions.
library(leaps)
newMLBData = na.omit(mlbdata)
attach(newMLBData)
#Now let's do a training set  Gives us a training set of 2/3rds
set.seed(1)
onetwothree = sample(c(1, 2, 3), nrow(newMLBData), rep=TRUE)
train = onetwothree != 1
test=(!train)
regfit.full = regsubsets(YearP1W~., newMLBData[train,], nvmax=25)
regfit.fwd = regsubsets(YearP1W~., newMLBData[train,], nvmax=30, method="forward")
regfit.bwd = regsubsets(YearP1W~., newMLBData[train,], nvmax=30, method="backward")
regfit.summary = summary(regfit.full)
plot(regfit.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
plot(regfit.summary$cp, xlab="Number of Variables", ylab="Adjusted cp", type="l")
plot(regfit.summary$bic, xlab="Number of Variables", ylab="Adjusted bic", type="l")
which.max(regfit.summary$adjr2)
which.min(regfit.summary$cp)
which.min(regfit.summary$bic)
plot(regfit.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
plot(regfit.summary$cp, xlab="Number of Variables", ylab="Adjusted cp", type="l")
plot(regfit.summary$bic, xlab="Number of Variables", ylab="Adjusted bic", type="l")
which.max(regfit.summary$adjr2)
which.min(regfit.summary$cp)
which.min(regfit.summary$bic)
#fix(newMLBData)
#Get a best fit
#regfit.best = regsubsets(YearP1W~., data=newMLBData[train,], nvmax=30, really.big=T)
regfit.best = regfit.full
regfit.test = model.matrix(YearP1W~., data=newMLBData[test,])
#Get the MSE Errors
val.errors = rep(NA, 30)
for (i in 1:30){
coefi = coef(regfit.best,id=i)
pred=regfit.test[,names(coefi)]%*%coefi
val.errors[i]=mean((newMLBData$YearP1W[test]-pred)^2)
}
print(which.min(val.errors))
coef(regfit.full, id=which.max(regfit.summary$adjr2))
coef(regfit.full, id=which.max(regfit.summary$adjr2))
which.max(regfit.summary$adjr2)
plot(regfit.summary$adjr2, xlab="Number of Variables", ylab="Adjusted RSq", type="l")
plot(regfit.summary$cp, xlab="Number of Variables", ylab="Adjusted cp", type="l")
which.min(regfit.summary$cp)
plot(regfit.summary$bic, xlab="Number of Variables", ylab="Adjusted bic", type="l")
which.min(regfit.summary$bic)
regfit.summary
coef(regfit.full, id=which.max(regfit.summary$adjr2))
coef(regfit.full, id=which.max(regfit.summary$adjr2))
coef(regfit.full, id=which.max(regfit.summary$cp))
coef(regfit.full, id=which.max(regfit.summary$cp))
coef(regfit.full, id=which.min(regfit.summary$cp))
which.max(regfit.summary$adjr2)
which.min(regfit.summary$cp)
which.min(regfit.summary$bic)
print(which.min(val.errors))
coef(regfit.full, id=which.min(regfit.summary$bic))
print(which.min(val.errors))
coef(regfit.full, id=which.min(val.errors))
regfit.full = regsubsets(YearP1W~., newMLBData[train,], nvmax=25)
regfit.summary
val.errors
